/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project6;
import java.sql.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import oracle.spatial.geometry.JGeometry;
import oracle.sql.STRUCT;

/**
 *
 * @author AKSHAYA
 */

public class assign5 extends JFrame {

    /**
     * Creates new form assign5
     */
    public assign5() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Graphics g = jPanel1.getGraphics();
        jPanel1 = new DrawPanel(g);
        jPanel1.setPreferredSize(new Dimension(800,750));

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1594, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );

        jCheckBox1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jCheckBox1.setText("SHOW LIONS AND PONDS IN THE SELECTED REGIONS");
        jCheckBox1.setMaximumSize(new java.awt.Dimension(575, 80));
        jCheckBox1.setMinimumSize(new java.awt.Dimension(575, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(429, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        if(jCheckBox1.isSelected()){ 
            System.out.println("Check box is selected.");
            jCheckBox1.setSelected(true);
            jPanel1.addMouseListener(new Mouse());
        }
        else
        {    
      System.out.println("Check box is unselected.");
      repaint();
         }
    }                                          
 
    public class Mouse extends MouseAdapter{
        @Override
        public void mouseClicked(MouseEvent e){
            if(jCheckBox1.isSelected()){
            pointdrop();
            DrawPanel dp = new DrawPanel();
           dp.sql(jPanel1.getGraphics());
           // jPanel1.repaint();
            int mX = e.getX(), mY = e.getY();
            Connection cm = dp.dbcon();
            try{
                Statement sm = cm.createStatement();
                pointinsert(mX, mY);
               String query = " select r.rid from table (sdo_join('points', 'ppshape', 'regions', 'rshape', 'mask=inside',1)) c, regions r, points p where c.rowid1=p.rowid and c.rowid2=r.rowid";
               System.out.println(mX + " "+mY);
                ResultSet rsm = sm.executeQuery(query);
                rsm.next();
                 Statement getps = cm.createStatement();
                String getp = " select pshape from table (sdo_join('ponds', 'pshape', 'regions', 'rshape', 'mask=inside',1)) c, regions r, ponds p where c.rowid1=p.rowid and c.rowid2=r.rowid and r.rid = 'r" + Integer.parseInt(rsm.getString(1).substring(1))+"'";
                ResultSet rsp = getps.executeQuery(getp);
                Statement getls = cm.createStatement();
                String getl =  "select lshape from table (sdo_join('lions', 'lshape', 'regions', 'rshape', 'mask=inside',1)) c, regions r, lions l where c.rowid1=l.rowid and c.rowid2=r.rowid and r.rid = 'r" + Integer.parseInt(rsm.getString(1).substring(1))+"'";
                ResultSet rsl = getls.executeQuery(getl);
                                try {
             while (rsl.next()){
                Graphics2D gl = (Graphics2D) jPanel1.getGraphics();
                gl.setColor(Color.red);
                STRUCT st = (STRUCT) rsl.getObject(1); 
                JGeometry j = JGeometry.loadJS(st);
                int x = (int) j.getJavaPoint().getX();
                int y = (int) j.getJavaPoint().getY();
                gl.fillOval(x-5, y-5, 11, 11);
             }} catch(SQLException e1) {System.out.println(e1);}
              try{
            while (rsp.next()){
                Graphics2D gp = (Graphics2D) jPanel1.getGraphics();
                gp.setColor(Color.black);
                STRUCT st = (STRUCT) rsp.getObject(1); 
                JGeometry j = JGeometry.loadJS(st);
                Shape p = j.createShape();
                gp.draw(p);   gp.setColor(Color.red);    gp.fill(p);
             }
        } catch(SQLException e1) {System.out.println(e1);}
        } catch(SQLException e1) {System.out.println("problem in mouseclick" + e1);}
       }
        }
        
       public void pointinsert(int x, int y){
           DrawPanel d = new DrawPanel();
           Connection ins = d.dbcon();
           try {
               Statement create = ins.createStatement();
               create.executeQuery("create table points (pid varchar(5) primary key, ppshape sdo_geometry)");
               Statement insert = ins.createStatement();
               insert.executeQuery("insert into points values ('0',  sdo_geometry(2001, null, sdo_point_type(" +x +","+ y+", null), null, null))");
               Statement metadata = ins.createStatement();
               metadata.executeQuery("insert into user_sdo_geom_metadata values ( 'points', 'ppshape', sdo_dim_array(sdo_dim_element('X', 0, 850, 0.005), sdo_dim_element('Y', 0, 580, 0.005)), null)");
               Statement index = ins.createStatement();
               index.executeQuery("create index ppindex on points(ppshape) indextype is mdsys.spatial_index");
               }catch(Exception e) {System.out.println("error in insert point" + e);}
       }
       
       public void pointdrop(){
           DrawPanel d = new DrawPanel();
           Connection del = d.dbcon();
           try{
                // Statement dropindex=del.createStatement();
                //dropindex.executeQuery("drop index ppindex ");
               Statement deleteMetadata = del.createStatement();
               deleteMetadata.executeQuery("delete from user_sdo_geom_metadata where table_name='POINTS' ");
               Statement droptable = del.createStatement();
               droptable.executeQuery("drop table points");
             
                  }catch(Exception e) {System.out.println("Problem in point drop" + e);}
       
       }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(assign5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(assign5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(assign5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(assign5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new assign5().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}


class DrawPanel extends JPanel {
    
     private static Connection conn=null;
     private Statement stmt=null;
     JPanel jp = new JPanel();
     public DrawPanel() {}
     public DrawPanel(Graphics g) {paintComponents(g);}
    
public Connection dbcon()
{
    
if(conn==null){
try
{
DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
}catch(SQLException ex)
{
System.out.println("Oracle Driver not found");
return conn;
}
try
{
conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","akshayaravi","oracle");
}catch(SQLException e)
{
System.out.println(e);
return conn;
}
if(conn!=null)
{
System.out.println("Connection Successful");
return conn;
}
else
{
System.out.println("Connection failed.");
}
}
return conn;
}
 public void sql(Graphics g){
        ResultSet rsl,rsp,rsr;
        dbcon();
        try{
           Statement sr ,sl,sp;
           sr= conn.createStatement();
           sl =conn.createStatement();
           sp = conn.createStatement();
            rsr = sr.executeQuery("select rshape from regions");
            rsl = sl.executeQuery("select lshape from lions");
            rsp = sp.executeQuery("select pshape from ponds"); 
           try{
            while (rsr.next()){
                Graphics2D gr = (Graphics2D) g;
                STRUCT str = (STRUCT) rsr.getObject(1); 
                JGeometry j = JGeometry.loadJS(str);
                Shape p = j.createShape();
                gr.setColor(Color.white);
                gr.fill(p);
                gr.setColor(Color.black);
                gr.draw(p);
            }
        }catch(SQLException e) {System.out.println("error in drawing region");}
            
            
           try {
             while (rsl.next()){
                Graphics2D gl = (Graphics2D) g;
                gl.setColor(Color.green);
                STRUCT str = (STRUCT) rsl.getObject(1); 
                JGeometry j = JGeometry.loadJS(str);
                int x = (int) j.getJavaPoint().getX();
                int y = (int) j.getJavaPoint().getY();
                gl.fillOval(x-5, y-5, 11,11);
             }} catch(SQLException e) {System.out.println("error in drawing lion");}
            
         try{
            while (rsp.next()){
                Graphics2D gp = (Graphics2D) g;
                gp.setColor(Color.black);
                STRUCT str = (STRUCT) rsp.getObject(1); 
                JGeometry j = JGeometry.loadJS(str);
                Shape p = j.createShape();
                gp.draw(p);
                gp.setColor(Color.blue);
                gp.fill(p);
            }
        } catch(SQLException e) {System.out.println("error in drawing pond");}
       
        } catch(SQLException e){System.out.println("display error");}
    }
       
     @Override
    public void paint(Graphics g) {
        super.paint(g);
        sql(g);
    }

}
